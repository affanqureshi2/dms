{"ast":null,"code":"var _jsxFileName = \"D:\\\\TypescriptTest\\\\dashboard\\\\src\\\\components\\\\ScanResultList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './styles/List.css';\nimport Badge from './badge';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ScanResultList = () => {\n  _s();\n  const [results, setResults] = useState([]);\n  useEffect(() => {\n    const fetchResults = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/results');\n        if (!response.ok) {\n          throw new Error('Failed to fetch scan results');\n        }\n        const data = await response.json();\n        setResults(data);\n        console.log(data);\n      } catch (error) {\n        console.error(error);\n        alert('Error fetching scan results');\n      }\n    };\n    fetchResults();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Repository Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Findings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Timestamp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: results.map(result => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.repositoryName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: result.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: result.findings\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }, this)]\n        }, result.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), results.map(result => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Badge, {\n        label: result.repositoryName,\n        fields: [result.status, result.timestamp]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, result.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true);\n};\n_s(ScanResultList, \"0Oir8sO9qj6087fqVYj2OrfQH1E=\");\n_c = ScanResultList;\nexport default ScanResultList;\nvar _c;\n$RefreshReg$(_c, \"ScanResultList\");","map":{"version":3,"names":["React","useState","useEffect","Badge","jsxDEV","_jsxDEV","Fragment","_Fragment","ScanResultList","_s","results","setResults","fetchResults","response","fetch","ok","Error","data","json","console","log","error","alert","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","result","repositoryName","status","findings","timestamp","id","label","fields","_c","$RefreshReg$"],"sources":["D:/TypescriptTest/dashboard/src/components/ScanResultList.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './styles/List.css';\r\nimport Badge from './badge';\r\n\r\nexport interface ScanResult {\r\n  id: number;\r\n  repositoryName: string;\r\n  status: 'Queued' | 'In Progress' | 'Success' | 'Failure';\r\n  findings: any[];\r\n  timestamp: string;\r\n}\r\n\r\nconst ScanResultList: React.FC = () => {\r\n\r\n    const [results, setResults] = useState<ScanResult[]>([]);\r\n\r\n    useEffect(() => {\r\n      const fetchResults = async () => {\r\n        try {\r\n          const response = await fetch('http://localhost:3000/api/results');\r\n          if (!response.ok) {\r\n            throw new Error('Failed to fetch scan results');\r\n          }\r\n          const data = await response.json();\r\n          setResults(data);\r\n          console.log(data);\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert('Error fetching scan results');\r\n        }\r\n      };\r\n  \r\n      fetchResults();\r\n    }, []);\r\n  \r\n    return (\r\n      <>\r\n        <table className=\"table\">\r\n            <thead>\r\n            <tr>\r\n                <th>Repository Name</th>\r\n                <th>Status</th>\r\n                <th>Findings</th>\r\n                <th>Timestamp</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {results.map((result) => (\r\n                <tr key={result.id}>\r\n                <td>{result.repositoryName}</td>\r\n                <td><span >{result.status}</span></td>\r\n                <td><span >{result.findings}</span></td>\r\n                <td>{result.timestamp}</td>\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n        </table>\r\n        {results.map((result) => (\r\n          <div key={result.id}>\r\n            <Badge label={result.repositoryName} fields={[result.status,result.timestamp]}/>\r\n            <td>{}</td>\r\n            <td><span >{}</span></td>\r\n            <td><span >{}</span></td>\r\n            <td>{}</td>\r\n          </div>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScanResultList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}