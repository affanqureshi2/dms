{"ast":null,"code":"var _jsxFileName = \"D:\\\\TypescriptTest\\\\dashboard\\\\src\\\\components\\\\ScanResultList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './styles/List.css';\nimport Badge from './Badge';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ScanResultList = () => {\n  _s();\n  const [results, setResults] = useState([]);\n  useEffect(() => {\n    const fetchResults = async () => {\n      try {\n        const response = await fetch('http://localhost:3000/api/results');\n        if (!response.ok) {\n          throw new Error('Failed to fetch scan results');\n        }\n        const data = await response.json();\n        setResults(data);\n        console.log(data);\n      } catch (error) {\n        console.error(error);\n        alert('Error fetching scan results');\n      }\n    };\n    fetchResults();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: results.map(result => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Badge, {\n          label: result.repositoryName,\n          fields: [result.status, result.timestamp]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)\n      }, result.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this))\n  }, void 0, false);\n};\n_s(ScanResultList, \"0Oir8sO9qj6087fqVYj2OrfQH1E=\");\n_c = ScanResultList;\nexport default ScanResultList;\nvar _c;\n$RefreshReg$(_c, \"ScanResultList\");","map":{"version":3,"names":["React","useState","useEffect","Badge","jsxDEV","_jsxDEV","Fragment","_Fragment","ScanResultList","_s","results","setResults","fetchResults","response","fetch","ok","Error","data","json","console","log","error","alert","children","map","result","label","repositoryName","fields","status","timestamp","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["D:/TypescriptTest/dashboard/src/components/ScanResultList.tsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './styles/List.css';\r\nimport Badge from './Badge';\r\n\r\nexport interface ScanResult {\r\n  id: number;\r\n  repositoryName: string;\r\n  status: 'Queued' | 'In Progress' | 'Success' | 'Failure';\r\n  findings: any[];\r\n  timestamp: string;\r\n}\r\n\r\nconst ScanResultList: React.FC = () => {\r\n\r\n    const [results, setResults] = useState<ScanResult[]>([]);\r\n\r\n    useEffect(() => {\r\n      const fetchResults = async () => {\r\n        try {\r\n          const response = await fetch('http://localhost:3000/api/results');\r\n          if (!response.ok) {\r\n            throw new Error('Failed to fetch scan results');\r\n          }\r\n          const data = await response.json();\r\n          setResults(data);\r\n          console.log(data);\r\n        } catch (error) {\r\n          console.error(error);\r\n          alert('Error fetching scan results');\r\n        }\r\n      };\r\n  \r\n      fetchResults();\r\n    }, []);\r\n  \r\n    return (\r\n      <>\r\n        {/* <table className=\"table\">\r\n            <thead>\r\n            <tr>\r\n                <th>Repository Name</th>\r\n                <th>Status</th>\r\n                <th>Findings</th>\r\n                <th>Timestamp</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {results.map((result) => (\r\n                <tr key={result.id}>\r\n                <td>{result.repositoryName}</td>\r\n                <td><span >{result.status}</span></td>\r\n                <td><span >{result.findings}</span></td>\r\n                <td>{result.timestamp}</td>\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n        </table> */}\r\n        {results.map((result) => (\r\n            <div>\r\n                <div key={result.id}>\r\n                    <Badge label={result.repositoryName} fields={[result.status,result.timestamp]}/>\r\n                </div>\r\n                <br />\r\n          </div>\r\n        ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ScanResultList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAO,mBAAmB;AAC1B,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAU5B,MAAMC,cAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEnC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAe,EAAE,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd,MAAMU,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,CAAC;QACjE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;QACjD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCP,UAAU,CAACM,IAAI,CAAC;QAChBE,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACnB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAACA,KAAK,CAAC;QACpBC,KAAK,CAAC,6BAA6B,CAAC;MACtC;IACF,CAAC;IAEDV,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA,CAAAE,SAAA;IAAAgB,QAAA,EAqBGb,OAAO,CAACc,GAAG,CAAEC,MAAM,iBAChBpB,OAAA;MAAAkB,QAAA,gBACIlB,OAAA;QAAAkB,QAAA,eACIlB,OAAA,CAACF,KAAK;UAACuB,KAAK,EAAED,MAAM,CAACE,cAAe;UAACC,MAAM,EAAE,CAACH,MAAM,CAACI,MAAM,EAACJ,MAAM,CAACK,SAAS;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAC,GAD1ET,MAAM,CAACU,EAAE;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEd,CAAC,eACN7B,OAAA;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CACN;EAAC,gBACJ,CAAC;AAEP,CAAC;AAACzB,EAAA,CAvDID,cAAwB;AAAA4B,EAAA,GAAxB5B,cAAwB;AAyD9B,eAAeA,cAAc;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}