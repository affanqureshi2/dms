{"ast":null,"code":"var _jsxFileName = \"D:\\\\TypescriptTest\\\\dashboard\\\\src\\\\components\\\\FindingsList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './styles/List.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FindingsList = ({\n  scanId\n}) => {\n  _s();\n  const [data, setData] = useState();\n  useEffect(() => {\n    const fetchFindings = async () => {\n      try {\n        const response = await fetch(`http://localhost:3000/api/results/${scanId}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch findings');\n        }\n        const data = await response.json();\n        setData(data);\n        console.log(data[0].findings);\n      } catch (error) {\n        console.error(error);\n        alert('Error fetching findings');\n      }\n    };\n    fetchFindings();\n  }, [scanId]);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"table\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Rule ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Severity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Path : Line Number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: data.map((element, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: element.findings.ruleId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: findings.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: findings.severity\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: findings.path\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(FindingsList, \"WZ2PO9A64oHRexE1CE+yX3ebuoA=\");\n_c = FindingsList;\nexport default FindingsList;\nvar _c;\n$RefreshReg$(_c, \"FindingsList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FindingsList","scanId","_s","data","setData","fetchFindings","response","fetch","ok","Error","json","console","log","findings","error","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","element","index","ruleId","description","severity","path","_c","$RefreshReg$"],"sources":["D:/TypescriptTest/dashboard/src/components/FindingsList.tsx"],"sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport './styles/List.css';\r\n\r\nexport interface Finding {\r\n  ruleId: string;\r\n  description: string;\r\n  severity: 'Low' | 'Medium' | 'High' | \"Critical\";\r\n  path: string;\r\n}\r\n\r\nconst FindingsList: React.FC<{ scanId: number  }> = ({ scanId }) => {\r\n\r\n    const [data, setData] = useState<Finding[]>();\r\n\r\n  useEffect(() => {\r\n    const fetchFindings = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:3000/api/results/${scanId}`);\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch findings');\r\n        }\r\n        const data = await response.json();\r\n        setData(data);\r\n        console.log(data[0].findings);\r\n      } catch (error) {\r\n        console.error(error);\r\n        alert('Error fetching findings');\r\n      }\r\n    };\r\n\r\n    fetchFindings();\r\n  }, [scanId]);\r\n  \r\n  return (\r\n    <table className=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th>Rule ID</th>\r\n          <th>Description</th>\r\n          <th>Severity</th>\r\n          <th>Path : Line Number</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data.map((element, index) => (\r\n          <tr >\r\n            <td>{element.findings.ruleId}</td>\r\n            <td>{findings.description}</td>\r\n            <td><span >{findings.severity}</span></td>\r\n            <td>{findings.path}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default FindingsList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}